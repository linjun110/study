<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
           version="3.1">
  <display-name>Archetype Created Web Application</display-name>

  <!-- [SCOPE: Spring MVC]: spring MVC的核心就是DispatcherServlet，使用springMVC的第一步就是将下面的servlet放入web.xml
        servlet-name属性非常重要，默认情况下，DispatchServlet会加载这个名字-servlet.xml的文件，如下，就会加载
        dispatcher-servlet.xml，也是在WEB-INF目录下。
   -->
  <servlet>
    <servlet-name>dispatcher</servlet-name>
    <!-- TIP: 这个Servlet由springframework 提供的, 所以说 spring mvc 是基于 servlet 的框架 -->
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <!-- 设置dispatchservlet的匹配模式，通过把dispatchservlet映射到/，默认servlet会处理所有的请求，包括静态资源 -->
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <!-- 字符集过滤器 -->
  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
      /WEB-INF/spring-security.xml,
      /WEB-INF/spring-database.xml,
      <!-- need to add local-beans for spring framework awareness -->
      /WEB-INF/local-beans.xml
    </param-value>
  </context-param>

  <!-- Spring Security -->
  <!-- 为什么 DelegatingFilterProxy 是由 spring web 提供 而不是 spring Security ?-->
  <!-- A: 这是因为 springframework for web 留下了这样一个Hook,以供使用者自行定义如何Filter, spring security正是利用了这一
  Hook,而实现了一个 springSecurityFilterChain的机制,来执行security相关的处理-->
  <filter>
    <filter-name>springSecurityFilterChain</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
  </filter>

  <filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>


  <session-config>
    <!-- 10 hours -->
    <session-timeout>600</session-timeout>
  </session-config>

</web-app>
